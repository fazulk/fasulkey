{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","MONGO_CONNECTION","process","env","DB_CONNECTION","FILENAME","__filename","exec","Error","stack","DIRNAME","__dirname","replace","app","URL","PORT","mongoose","connect","useCreateIndex","useNewUrlParser","then","console","log","catch","err","use","express","json","urlencoded","extended","static","path","join","bodyParser","schema","graphiql","listen"],"mappings":";;;;;;AAAA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAVAA,iBAAOC,MAAP;;;AAYA,IAAMC,mBAAmBC,QAAQC,GAAR,CAAYC,aAArC;;AAEA,IAAMC,WACF,OAAOC,UAAP,mBACMA,UADN,GAEM,CAAC,2CAA2CC,IAA3C,CAAgDC,QAAQC,KAAxD,OAAD,EACQ,CADR,CAHV;AAKA,IAAMC,UACF,OAAOC,SAAP,mBACMA,SADN,GAEMN,SAASO,OAAT,CAAiB,YAAjB,KAHV;;AAKA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,wBAAN;AACA,IAAMC,OAAO,IAAb;;AAEA;AACAC,mBACKC,OADL,CACahB,gBADb,EAC+B;AACvBiB,oBAAgB,IADO;AAEvBC,qBAAiB;AAFM,CAD/B,EAKKC,IALL,CAKU;AAAA,WAAMC,QAAQC,GAAR,qBAAN;AAAA,CALV,EAMKC,KANL,CAMW;AAAA,WAAOF,QAAQC,GAAR,CAAYE,GAAZ,CAAP;AAAA,CANX;;AAQAX,IAAIY,GAAJ,CAAQ,4BAAR;AACAZ,IAAIY,GAAJ,CAAQC,kBAAQC,IAAR,EAAR;AACAd,IAAIY,GAAJ,CAAQC,kBAAQE,UAAR,CAAmB,EAAEC,UAAU,KAAZ,EAAnB,CAAR;AACAhB,IAAIY,GAAJ,CAAQ,6BAAR;AACAZ,IAAIY,GAAJ,CAAQC,kBAAQI,MAAR,CAAeC,eAAKC,IAAL,CAAUtB,OAAV,WAAf,CAAR;AACAG,IAAIY,GAAJ,CAAQ,qBAAR;;AAEAZ,IAAIY,GAAJ,aAEI,qBAFJ,EAGIQ,qBAAWN,IAAX,EAHJ,EAII,8BAAe;AACXO,6BADW;AAEXC,cAAU;AAFC,CAAf,CAJJ;;AAUAtB,IAAIuB,MAAJ,CAAWrB,IAAX,EAAiB,YAAM;AACnBM,YAAQC,GAAR,mBAA4BR,GAA5B,SAAmCC,IAAnC;AACH,CAFD;;kBAIeF,G","file":"app.js","sourcesContent":["import \"@babel/polyfill\";\nimport dotenv from 'dotenv'\ndotenv.config()\nimport regeneratorRuntime from \"regenerator-runtime\";\nimport express from 'express'\nimport expressGraphQL from 'express-graphql'\nimport mongoose from 'mongoose'\nimport bodyParser from 'body-parser'\nimport cors from 'cors'\nimport cookieParser from 'cookie-parser'\nimport logger from 'morgan'\nimport path from 'path'\nimport schema from './graphql'\n\nconst MONGO_CONNECTION = process.env.DB_CONNECTION\n\nconst FILENAME =\n    typeof __filename !== `undefined`\n        ? __filename\n        : (/^ +at (?:file:\\/*(?=\\/)|)(.*?):\\d+:\\d+$/m.exec(Error().stack) ||\n              ``)[1]\nconst DIRNAME =\n    typeof __dirname !== `undefined`\n        ? __dirname\n        : FILENAME.replace(/[\\/\\\\].*?$/, ``)\n\nconst app = express()\nconst URL = `http://localhost`\nconst PORT = 3001\n\n// Connect to MongoDB with Mongoose.\nmongoose\n    .connect(MONGO_CONNECTION, {\n        useCreateIndex: true,\n        useNewUrlParser: true\n    })\n    .then(() => console.log(`MongoDB connected`))\n    .catch(err => console.log(err))\n\napp.use(logger(`dev`))\napp.use(express.json())\napp.use(express.urlencoded({ extended: false }))\napp.use(cookieParser())\napp.use(express.static(path.join(DIRNAME, `public`)))\napp.use(cors())\n\napp.use(\n    `/graphql`,\n    cors(),\n    bodyParser.json(),\n    expressGraphQL({\n        schema,\n        graphiql: true\n    })\n)\n\napp.listen(PORT, () => {\n    console.log(`Listening on ${URL}:${PORT}`)\n})\n\nexport default app\n"]}