{"version":3,"sources":["../../src/bin/www.js"],"names":["port","normalizePort","process","env","PORT","app","set","server","http","createServer","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address"],"mappings":";;AAMA;;;;AACA;;;;AACA;;;;;;AAEA;;AAEA;;;;AAVA;;;;AAcA,IAAIA,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,UAAd,CAAX;AACAC,cAAIC,GAAJ,SAAgBN,IAAhB;;AAEA;;;;AAIA,IAAIO,SAASC,eAAKC,YAAL,CAAkBJ,aAAlB,CAAb;;AAEA;;;;AAIAE,OAAOG,MAAP,CAAcV,IAAd;AACAO,OAAOI,EAAP,UAAmBC,OAAnB;AACAL,OAAOI,EAAP,cAAuBE,WAAvB;;AAEA;;;;AAIA,SAASZ,aAAT,CAAuBa,GAAvB,EAA4B;AACxB,QAAId,OAAOe,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,QAAIE,MAAMhB,IAAN,CAAJ,EAAiB;AACb;AACA,eAAOc,GAAP;AACH;;AAED,QAAId,QAAQ,CAAZ,EAAe;AACX;AACA,eAAOA,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;AAIA,SAASY,OAAT,CAAiBK,KAAjB,EAAwB;AACpB,QAAIA,MAAMC,OAAN,aAAJ,EAAgC;AAC5B,cAAMD,KAAN;AACH;;AAED,QAAIE,OAAO,OAAOnB,IAAP,gBAA2B,UAAUA,IAArC,GAA4C,UAAUA,IAAjE;;AAEA;AACA,YAAQiB,MAAMG,IAAd;AACI;AACIC,oBAAQJ,KAAR,CAAcE,sCAAd;AACAjB,oBAAQoB,IAAR,CAAa,CAAb;AACA;AACJ;AACID,oBAAQJ,KAAR,CAAcE,2BAAd;AACAjB,oBAAQoB,IAAR,CAAa,CAAb;AACA;AACJ;AACI,kBAAML,KAAN;AAVR;AAYH;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACnB,QAAIU,OAAOhB,OAAOiB,OAAP,EAAX;AACA,QAAIL,OAAO,OAAOI,IAAP,gBAA2B,UAAUA,IAArC,GAA4C,UAAUA,KAAKvB,IAAtE;AACA,yBAAM,kBAAkBmB,IAAxB;AACH","file":"www.js","sourcesContent":["\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nimport app from '../app'\r\nimport debug from 'debug'\r\nimport http from 'http'\r\n\r\ndebug(`fasulkey:server`)\r\n\r\n/**\r\n * Get port from environment and store in Express.\r\n */\r\n\r\nvar port = normalizePort(process.env.PORT || `3000`)\r\napp.set(`port`, port)\r\n\r\n/**\r\n * Create HTTP server.\r\n */\r\n\r\nvar server = http.createServer(app)\r\n\r\n/**\r\n * Listen on provided port, on all network interfaces.\r\n */\r\n\r\nserver.listen(port)\r\nserver.on(`error`, onError)\r\nserver.on(`listening`, onListening)\r\n\r\n/**\r\n * Normalize a port into a number, string, or false.\r\n */\r\n\r\nfunction normalizePort(val) {\r\n    var port = parseInt(val, 10)\r\n\r\n    if (isNaN(port)) {\r\n        // named pipe\r\n        return val\r\n    }\r\n\r\n    if (port >= 0) {\r\n        // port number\r\n        return port\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"error\" event.\r\n */\r\n\r\nfunction onError(error) {\r\n    if (error.syscall !== `listen`) {\r\n        throw error\r\n    }\r\n\r\n    var bind = typeof port === `string` ? `Pipe ` + port : `Port ` + port\r\n\r\n    // handle specific listen errors with friendly messages\r\n    switch (error.code) {\r\n        case `EACCES`:\r\n            console.error(bind + ` requires elevated privileges`)\r\n            process.exit(1)\r\n            break\r\n        case `EADDRINUSE`:\r\n            console.error(bind + ` is already in use`)\r\n            process.exit(1)\r\n            break\r\n        default:\r\n            throw error\r\n    }\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"listening\" event.\r\n */\r\n\r\nfunction onListening() {\r\n    var addr = server.address()\r\n    var bind = typeof addr === `string` ? `pipe ` + addr : `port ` + addr.port\r\n    debug(`Listening on ` + bind)\r\n}\r\n"]}